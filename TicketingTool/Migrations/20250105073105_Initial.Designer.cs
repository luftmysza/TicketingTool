// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingTool.Data;

#nullable disable

namespace TicketingTool.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250105073105_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserProject", b =>
                {
                    b.Property<int>("ProjectsID")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectsID", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserProject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TicketingTool.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17e5d838-7a22-47a5-bb97-3832c3de5934",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "X001",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a1190d0-a4b5-42f7-a529-d22243fd6358",
                            TwoFactorEnabled = false,
                            UserName = "X001"
                        });
                });

            modelBuilder.Entity("TicketingTool.Models.Component", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Component");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ComponentName = "Unidentified"
                        },
                        new
                        {
                            ID = 2,
                            ComponentName = "User Interface Module"
                        },
                        new
                        {
                            ID = 3,
                            ComponentName = "Database Management"
                        },
                        new
                        {
                            ID = 4,
                            ComponentName = "API Gateway"
                        },
                        new
                        {
                            ID = 5,
                            ComponentName = "Logging Service"
                        },
                        new
                        {
                            ID = 6,
                            ComponentName = "Notification System"
                        },
                        new
                        {
                            ID = 7,
                            ComponentName = "Payment Processor"
                        },
                        new
                        {
                            ID = 8,
                            ComponentName = "Analytics Engine"
                        },
                        new
                        {
                            ID = 9,
                            ComponentName = "Reporting Tool"
                        },
                        new
                        {
                            ID = 10,
                            ComponentName = "Cache Management"
                        },
                        new
                        {
                            ID = 11,
                            ComponentName = "Authentication Service"
                        });
                });

            modelBuilder.Entity("TicketingTool.Models.Component2Project", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("ComponentID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Component2Project");

                    b.HasData(
                        new
                        {
                            ComponentID = 1,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 2,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 3,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 4,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 5,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 6,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 7,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 8,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 9,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 10,
                            ProjectID = 1
                        },
                        new
                        {
                            ComponentID = 11,
                            ProjectID = 1
                        });
                });

            modelBuilder.Entity("TicketingTool.Models.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<string>("ProjectKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Counter = 5,
                            ProjectKey = "BSC",
                            ProjectName = "Basic Project"
                        });
                });

            modelBuilder.Entity("TicketingTool.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            StatusName = "Open"
                        },
                        new
                        {
                            ID = 2,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            ID = 3,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            ID = 4,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("TicketingTool.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AssigneeID")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("IssueKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("AssigneeID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("CreatorID");

                    b.HasIndex("IssueKey")
                        .IsUnique();

                    b.HasIndex("ProjectID");

                    b.HasIndex("StatusID");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ComponentID = 1,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 342, DateTimeKind.Local).AddTicks(2703),
                            CreatorID = "X001",
                            Description = "Lorem ipsum odor amet, consectetuer adipiscing elit. Curabitur duis non dis ligula potenti praesent aenean. Mus etiam ridiculus viverra sed sapien nascetur, turpis tempor sollicitudin. Aptent enim luctus dui; urna per id. Sodales auctor vel accumsan dictumst placerat feugiat lectus curabitur? Quam risus lorem vitae commodo porttitor orci ultrices.",
                            IssueKey = "BSC-1",
                            LastUpdatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8255),
                            ProjectID = 1,
                            StatusID = 1,
                            Title = "Seed Ticket 1"
                        },
                        new
                        {
                            ID = 2,
                            ComponentID = 1,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8454),
                            CreatorID = "X001",
                            Description = "Lorem ipsum odor amet, consectetuer adipiscing elit. Curabitur duis non dis ligula potenti praesent aenean. Mus etiam ridiculus viverra sed sapien nascetur, turpis tempor sollicitudin. Aptent enim luctus dui; urna per id. Sodales auctor vel accumsan dictumst placerat feugiat lectus curabitur? Quam risus lorem vitae commodo porttitor orci ultrices.",
                            IssueKey = "BSC-2",
                            LastUpdatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8459),
                            ProjectID = 1,
                            StatusID = 1,
                            Title = "Seed Ticket 2"
                        },
                        new
                        {
                            ID = 3,
                            ComponentID = 1,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8462),
                            CreatorID = "X001",
                            Description = "Lorem ipsum odor amet, consectetuer adipiscing elit. Curabitur duis non dis ligula potenti praesent aenean. Mus etiam ridiculus viverra sed sapien nascetur, turpis tempor sollicitudin. Aptent enim luctus dui; urna per id. Sodales auctor vel accumsan dictumst placerat feugiat lectus curabitur? Quam risus lorem vitae commodo porttitor orci ultrices.",
                            IssueKey = "BSC-3",
                            LastUpdatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8463),
                            ProjectID = 1,
                            StatusID = 1,
                            Title = "Seed Ticket 3"
                        },
                        new
                        {
                            ID = 4,
                            ComponentID = 1,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8490),
                            CreatorID = "X001",
                            Description = "Lorem ipsum odor amet, consectetuer adipiscing elit. Curabitur duis non dis ligula potenti praesent aenean. Mus etiam ridiculus viverra sed sapien nascetur, turpis tempor sollicitudin. Aptent enim luctus dui; urna per id. Sodales auctor vel accumsan dictumst placerat feugiat lectus curabitur? Quam risus lorem vitae commodo porttitor orci ultrices.",
                            IssueKey = "BSC-4",
                            LastUpdatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8492),
                            ProjectID = 1,
                            StatusID = 1,
                            Title = "Seed Ticket 4"
                        },
                        new
                        {
                            ID = 5,
                            ComponentID = 1,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8505),
                            CreatorID = "X001",
                            Description = "Lorem ipsum odor amet, consectetuer adipiscing elit. Curabitur duis non dis ligula potenti praesent aenean. Mus etiam ridiculus viverra sed sapien nascetur, turpis tempor sollicitudin. Aptent enim luctus dui; urna per id. Sodales auctor vel accumsan dictumst placerat feugiat lectus curabitur? Quam risus lorem vitae commodo porttitor orci ultrices.",
                            IssueKey = "BSC-5",
                            LastUpdatedDate = new DateTime(2025, 1, 5, 8, 31, 5, 343, DateTimeKind.Local).AddTicks(8507),
                            ProjectID = 1,
                            StatusID = 1,
                            Title = "Seed Ticket 5"
                        });
                });

            modelBuilder.Entity("TicketingTool.Models.TicketChange", b =>
                {
                    b.Property<int>("ChangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeID"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedByRefId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChangedFieldID")
                        .HasColumnType("int");

                    b.Property<int>("ChangedFieldRefID")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<string>("changedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChangeID");

                    b.HasIndex("ChangedByRefId");

                    b.HasIndex("ChangedFieldRefID");

                    b.HasIndex("TicketID");

                    b.ToTable("TicketChange");
                });

            modelBuilder.Entity("TicketingTool.Models.TicketField", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("TicketField");
                });

            modelBuilder.Entity("ApplicationUserProject", b =>
                {
                    b.HasOne("TicketingTool.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingTool.Models.Component", b =>
                {
                    b.HasOne("TicketingTool.Models.Project", null)
                        .WithMany("Components")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("TicketingTool.Models.Component2Project", b =>
                {
                    b.HasOne("TicketingTool.Models.Component", "ComponentRef")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingTool.Models.Project", "ProjectRef")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentRef");

                    b.Navigation("ProjectRef");
                });

            modelBuilder.Entity("TicketingTool.Models.Ticket", b =>
                {
                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", "AssigneeRef")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssigneeID")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingTool.Models.Component", "ComponentRef")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", "CreatorRef")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatorID")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketingTool.Models.Project", "ProjectRef")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketingTool.Models.Status", "StatusRef")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssigneeRef");

                    b.Navigation("ComponentRef");

                    b.Navigation("CreatorRef");

                    b.Navigation("ProjectRef");

                    b.Navigation("StatusRef");
                });

            modelBuilder.Entity("TicketingTool.Models.TicketChange", b =>
                {
                    b.HasOne("TicketingTool.Areas.Identity.Data.ApplicationUser", "ChangedByRef")
                        .WithMany()
                        .HasForeignKey("ChangedByRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingTool.Models.TicketField", "ChangedFieldRef")
                        .WithMany()
                        .HasForeignKey("ChangedFieldRefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingTool.Models.Ticket", "TicketRef")
                        .WithMany("Changes")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangedByRef");

                    b.Navigation("ChangedFieldRef");

                    b.Navigation("TicketRef");
                });

            modelBuilder.Entity("TicketingTool.Models.TicketField", b =>
                {
                    b.HasOne("TicketingTool.Models.Project", "ProjectRef")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRef");
                });

            modelBuilder.Entity("TicketingTool.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("CreatedTickets");
                });

            modelBuilder.Entity("TicketingTool.Models.Project", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingTool.Models.Ticket", b =>
                {
                    b.Navigation("Changes");
                });
#pragma warning restore 612, 618
        }
    }
}
